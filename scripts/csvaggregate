#! /usr/bin/perl

use strict;
use warnings;

use version; BEGIN { our $VERSION = qv('0.0') }


############################################################
# Constants
############################################################
use Readonly;

############################################################
# DSL
############################################################
sub compile {
    # Type  : 
    # Descr : Translate DSL to Perl
    # Params: DSL
    # Return: Perl
    # Throws: 
    my ($dsl) = @_;

    $dsl =~ s'%o'$old[$i]'g;
    $dsl =~ s'%_'$csv_row->[$col]'g;
    $dsl =~ s/%(\d+)/\$csv_row->[$1]/g;

    return $dsl;
}

sub compile_last {
    # Type  : 
    # Descr : Translate DSL to Perl
    # Params: DSL
    # Return: Perl
    # Throws: 
    my ($dsl) = @_;

    $dsl =~ s'%[_o]'$old[$i]'g;
    $dsl =~ s/%(\d+)/\$old[$1]/g;

    return $dsl;
}


############################################################
# Arguments
############################################################
my $initial_value = 0;
my $last_function;
while ($ARGV[0] =~ /^-/) {
  if ($ARGV[0] eq '-i') {
    $initial_value = $ARGV[1];
    splice @ARGV, 0, 2;
  }
  elsif ($ARGV[0] eq '-l') {
    $last_function = compile_last($ARGV[1]);
    splice @ARGV, 0, 2;
  }
}
my $csvfile = shift @ARGV;
my $function = compile(shift @ARGV);
my @columns = split /,/, (shift @ARGV);

#print STDERR "function : $function\n";

############################################################
# Globals
############################################################
my @old = map { $initial_value } @columns;


############################################################
# Main
############################################################

use Parse::CSV;

# Parse
my $csv = Parse::CSV->new( file => $csvfile );
while (my $csv_row = $csv->fetch ) {
  for my $i (0..$#columns) {
    my $col = $columns[$i];
    $old[$i] = eval $function;
    die $@ if ($@);
  }
}

# Last
if (defined $last_function) {
  for my $i (1..$#columns) {
    $old[$i] = eval $last_function;
    die $@ if ($@);
  }
  splice @old, 0, 1;
}

#Output
print join(',', @old) . "\n";



__END__

=head1 NAME

csvaggregate - 

=head1 SYNOPSIS

    csvaggregate [options] <csvfile> <formula> <columns>

=head1 DESCRIPTION



=head1 REQUIRED ARGUMENTS

=over

=item <csvfile>

=item <formula>

=item <columns>

=back

=head1 OPTIONAL ARGUMENTS

=over

=item -i[nitial] <initial_value>

=for Euclid:
  initial_value.type: number
  initial_value.default: 0

=item -l <formula>

Apply the formula at last and remove the first row.

=back

=head1 DIAGNOSTICS

=over

=item 

=back


=head1 DEPENDENCIES

L<>

=head1 BUGS AND LIMITATIONS

No bugs have been reported.

Please report any bugs or feature requests to C<< <jogo@matabio.net> >>.

=head1 AUTHOR

Joseph Boudou, C<< <jogo@matabio.net> >>

=head1 LICENCE AND COPYRIGHT

Copyright 2009 Joseph Boudou.

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See L<perlartistic>.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
